# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iY0M1wLlPJtf3Hz-pllDDa97xtH5vP9J
"""

import requests
import numpy as np
import json
import itertools
from pymongo import MongoClient
import schedule
import time
import warnings
import ssl
warnings.filterwarnings("ignore")
# The Extractor 9000 for getting any  key from nested json


client = MongoClient("mongodb://127.0.0.1:27017/saltoosi")
all_devId = []
devId_json = []
prop = []

db = client['saltoosi']
Collection = db['scrape']

    #reading all ids from collection
ids = Collection.find({},{'_id': 1})

    #appending all the ids in a list
for data in ids:
    all_devId.append(data.get('_id'))

fin_devId_mongo = set(all_devId)
    
    #json se ids
    
with open('thisit.json') as f:
    file_data = json.load(f)


for ind in range(0,len(file_data)):
    scr = file_data[ind]
    devId_json.append(scr.get('_id'))

fin_devId_json = set(devId_json)
    
    #creating json file
    
main_list = np.setdiff1d(fin_devId_json,fin_devId_mongo)
main_list = list(set(fin_devId_json) - set(fin_devId_mongo))


def json_extract(obj, key):
    
    arr = []

    def extract(obj, arr, key):
        
        if isinstance(obj, dict):
            for k, v in obj.items():
                if isinstance(v, (dict, list)):
                    extract(v, arr, key)
                elif k == key:
                    arr.append(v)
        elif isinstance(obj, list):
            for item in obj:
                extract(item, arr, key)
        return arr

    values = extract(obj, arr, key)
    return values

def compar():
    #connecting to mongodb

    for i in file_data:
        for j in range(0,len(main_list)):
            if i['_id'] == main_list[j]:
                prop.append(i)
                out_file = open("dum.json", "w") 
                json.dump(prop, out_file, indent = 6)
                out_file.close()
    
compar()

# Function for getting all the info about the properties 

def get_allinfo():

    #  Api calls for it 
    urlpin = 'https://www.buzzbuzzhome.com/api/map/GetPins'
    urlobj = 'https://www.buzzbuzzhome.com/api/map/GetFullObj'

    # Payload for the getting all the sites in a given region just specifiy the coordinates for the region ,currently supporting  Greater  vancover 
    myobj = {"sellStatus":"fs","homeType":[],"priceMin":0,"priceMax":0,"bdRmCount":[],"conStatus":[],"bathRmCount":"1","sellStatusType":["fs","ir"],"topLeft":"49.5865675,-123.4574895","btmRight":"48.9852605,-122.382414","requestId":50}

    response = requests.post(urlpin, json = myobj)
    res_json = response.json()
    #print(res_json)

    # List of all the ids extracted 
    ids = list(json_extract(res_json,'_id'))

    
    properties = []
   
    # set to max 49 as the api only supports 50 calls at a time 
    batch_size = 48   

    for i in range(0, len(ids), batch_size):
       # print(ids[i:i+batch_size])
        new = {"ids":ids[i:i+batch_size]}

    
        response = requests.post(urlobj, json = new)
        res = response.json()

        #This is the line 
        properties=properties+(res['hits']['hits'])
    # This will save all the data from the json response to the file as needed by us 
    out_file = open("thisit.json", "w") 
    json.dump(properties, out_file, indent = 6) 
    #print(properties)

    out_file.close() 

    #print(res)
    
    client =  MongoClient("mongodb://127.0.0.1:27017/saltoosi")

    db = client['saltoosi']

    Collection = db['scrape']

    with open('thisit.json') as f:
        file_data = json.load(f)
        
    #with open('dum.json') as f:
    #    f_data = json.load(f)

    if Collection.count() == 0:
        if isinstance(file_data, list):
            Collection.insert_many(file_data)  
        else:
            Collection.insert_one(file_data)
    #else:
     #   if isinstance(f_data, list):
      #      Collection.insert_many(f_data)  
       # else:
        #    Collection.insert_one(f_data)
            
            
    if len(main_list) != 0:
        with open('dum.json') as f:
            f_data = json.load(f)
            if isinstance(f_data, list):
                Collection.insert_many(f_data)  
            else:
                Collection.insert_one(f_data)
            
get_allinfo()

def dele():
    main_lists = []
    main_lists = list(set(fin_devId_mongo) - set(fin_devId_json))
    for idss in main_lists:
        print(idss)
        query = {"_id" : idss}
        Collection.delete_one(query)
        
dele()
#compare listings and values
def sorting(item):
    if isinstance(item, dict):
        return sorted((key, sorting(values)) for key, values in item.items())
    if isinstance(item, list):
        return sorted(sorting(x) for x in item)
    else:
        return item
    
with open('thisit.json') as f:
    file_data = json.load(f)
    
    
resid = []
bkt = []
for dev in file_data:
    ab = dev['_id']
    mong = Collection.find_one({"_id": ab})
    jid = mong.get('_id')
    if dev['_id'] == jid:
        #print(dev)
        az = sorting(mong) == sorting(dev)
        if az == False:
            myquer = {"_id":jid}
            resid.append(jid)
            Collection.delete_one(myquer)
    

def chang():
    #resid = []
    #bkt = []
    #for dev in file_data:
     #   ab = dev['_id']
      #  mong = Collection.find_one({"_id": ab})
       # jid = mong.get('_id')
        #if dev['_id'] == jid:
            #print(dev)
         #   az = sorting(mong) == sorting(dev)
          #  if az == False:
           #     myquer = {"_id":jid}
            #    resid.append(jid)
             #   Collection.delete_one(myquer)
                
                
    for acg in file_data:
        for bc in range(0,len(set(resid))):
            if acg['_id'] == resid[bc]:
                bkt.append(acg)
    out_file = open("dump.json", "w") 
    json.dump(bkt, out_file, indent = 6)
    out_file.close()
                
chang()

def dum():
    if len(resid) != 0:
        with open('dump.json') as f:
            fi_data = json.load(f)
        

        if isinstance(fi_data, list):
            Collection.insert_many(fi_data)  
        else:
            Collection.insert_one(fi_data)
        
dum()